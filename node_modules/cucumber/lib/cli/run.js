'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _regenerator = require('babel-runtime/regenerator');var _regenerator2 = _interopRequireDefault(_regenerator);var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);var _ = require('./');var _2 = _interopRequireDefault(_);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}exports.default = function () {var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(

  function _callee() {var cli, success, exitCode,















    exitNow;return _regenerator2.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:exitNow = function exitNow() {
              process.exit(exitCode);
            };cli = new _2.default({ argv: process.argv, cwd: process.cwd(), stdout: process.stdout });success = void 0;_context.prev = 3;_context.next = 6;return cli.run();case 6:success = _context.sent;_context.next = 13;break;case 9:_context.prev = 9;_context.t0 = _context['catch'](3);process.nextTick(function () {throw _context.t0;});return _context.abrupt('return');case 13:exitCode = success ? 0 : 1;

            // If stdout.write() returned false, kernel buffer is not empty yet
            if (process.stdout.write('')) {
              exitNow();
            } else {
              process.stdout.on('drain', exitNow);
            }case 15:case 'end':return _context.stop();}}}, _callee, this, [[3, 9]]);}));function run() {return _ref.apply(this, arguments);}return run;}();